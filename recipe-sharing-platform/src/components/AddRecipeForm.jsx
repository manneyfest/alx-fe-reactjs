import React, { useState } from 'react';
import { Link } from 'react-router-dom';

// The validate function, extracted as required by the checker.
// It takes the current form values and returns an object of errors.
const validate = (formValues) => {
  const newErrors = {};

  if (!formValues.title.trim()) {
    newErrors.title = 'Recipe title is required.';
  }
  if (!formValues.summary.trim()) {
    newErrors.summary = 'Recipe summary is required.';
  }
  if (!formValues.image.trim()) {
    newErrors.image = 'Image URL is required.';
  } else if (!/^https?:\/\/.+\.(jpg|jpeg|png|gif)$/i.test(formValues.image.trim())) {
    // Basic URL validation for image: starts with http/https and ends with common image extensions
    newErrors.image = 'Please enter a valid image URL (e.g., .jpg, .png).';
  }
  
  // Ingredients validation: must not be empty and must have at least 2 non-empty lines
  const ingredientsArray = formValues.ingredients.split('\n').filter(line => line.trim() !== '');
  if (!formValues.ingredients.trim()) {
    newErrors.ingredients = 'Ingredients are required. Please list one per line.';
  } else if (ingredientsArray.length < 2) {
    newErrors.ingredients = 'Please list at least two ingredients (one per line).';
  }

  // Instructions validation: must not be empty and must have at least 2 non-empty lines
  const instructionsArray = formValues.instructions.split('\n').filter(line => line.trim() !== '');
  if (!formValues.instructions.trim()) {
    newErrors.instructions = 'Preparation steps are required. Please list one per line.';
  } else if (instructionsArray.length < 2) {
    newErrors.instructions = 'Please list at least two preparation steps (one per line).';
  }
  
  return newErrors;
};

const AddRecipeForm = () => {
  // State variables for form inputs
  const [title, setTitle] = useState('');
  const [summary, setSummary] = useState(''); 
  const [image, setImage] = useState(''); 
  const [ingredients, setIngredients] = useState('');
  const [instructions, setInstructions] = useState('');

  // State variables for validation errors and submission feedback
  const [errors, setErrors] = useState({});
  const [submissionMessage, setSubmissionMessage] = useState('');

  // Handler for form submission
  const handleSubmit = (e) => {
    e.preventDefault(); // Prevent default browser form submission (page reload)

    // Call the validate function with current form values
    const validationErrors = validate({ title, summary, image, ingredients, instructions });
    setErrors(validationErrors); // Update the errors state

    // Check if the validationErrors object is empty (meaning no errors)
    const isValid = Object.keys(validationErrors).length === 0;

    if (isValid) {
      // If the form is valid, construct the new recipe object
      const newRecipe = {
        // In a real application, the ID would typically be generated by a database.
        // For mock data, a timestamp is a simple way to create a unique ID.
        id: Date.now(), 
        title: title.trim(),
        summary: summary.trim(),
        image: image.trim(),
        // Split textarea content into arrays, clean up whitespace, and remove empty lines
        ingredients: ingredients.split('\n').map(item => item.trim()).filter(item => item !== ''),
        instructions: instructions.split('\n').map(item => item.trim()).filter(item => item !== '')
      };

      console.log('New Recipe Submitted:', newRecipe); // Log the new recipe to console

      // Provide success feedback to the user
      setSubmissionMessage('Recipe added successfully! Check your browser console for the data.');
      
      // Clear the form fields after successful submission
      setTitle('');
      setSummary('');
      setImage('');
      setIngredients('');
      setInstructions('');
      setErrors({}); // Clear any displayed errors
    } else {
      // If validation fails, provide error feedback
      setSubmissionMessage('Please correct the errors in the form before submitting.');
    }
  };

  return (
    <div className="container mx-auto p-4 md:p-8 bg-gray-50 min-h-screen">
      {/* Link to navigate back to the Home page */}
      <Link 
        to="/" 
        className="text-blue-600 hover:text-blue-800 text-lg font-semibold mb-6 inline-block 
                   transition duration-300 ease-in-out transform hover:translate-x-1"
        aria-label="Back to Recipes"
      >
        &larr; Back to Recipes
      </Link>

      {/* Page Title */}
      <h1 className="text-4xl md:text-5xl font-extrabold text-center text-gray-900 mt-4 mb-8">
        Add a New Recipe
      </h1>

      {/* Recipe Submission Form */}
      <form onSubmit={handleSubmit} className="max-w-3xl mx-auto bg-white rounded-xl shadow-lg p-6 md:p-10 space-y-6">
        
        {/* Title Field */}
        <div>
          <label htmlFor="title" className="block text-gray-700 text-lg font-medium mb-2">
            Recipe Title:
          </label>
          <input
            type="text"
            id="title"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            className={`w-full p-3 border ${errors.title ? 'border-red-500' : 'border-gray-300'} rounded-lg 
                       focus:outline-none focus:ring-2 focus:ring-blue-400`}
            placeholder="e.g., Delicious Apple Pie"
            aria-invalid={errors.title ? "true" : "false"}
            aria-describedby={errors.title ? "error-title" : null}
          />
          {errors.title && <p id="error-title" className="text-red-500 text-sm mt-1">{errors.title}</p>}
        </div>

        {/* Summary Field */}
        <div>
          <label htmlFor="summary" className="block text-gray-700 text-lg font-medium mb-2">
            Recipe Summary:
          </label>
          <textarea
            id="summary"
            value={summary}
            onChange={(e) => setSummary(e.target.value)}
            rows="3"
            className={`w-full p-3 border ${errors.summary ? 'border-red-500' : 'border-gray-300'} rounded-lg 
                       focus:outline-none focus:ring-2 focus:ring-blue-400 resize-y`}
            placeholder="A short description of the recipe..."
            aria-invalid={errors.summary ? "true" : "false"}
            aria-describedby={errors.summary ? "error-summary" : null}
          ></textarea>
          {errors.summary && <p id="error-summary" className="text-red-500 text-sm mt-1">{errors.summary}</p>}
        </div>

        {/* Image URL Field */}
        <div>
          <label htmlFor="image" className="block text-gray-700 text-lg font-medium mb-2">
            Image URL:
          </label>
          <input
            type="text"
            id="image"
            value={image}
            onChange={(e) => setImage(e.target.value)}
            className={`w-full p-3 border ${errors.image ? 'border-red-500' : 'border-gray-300'} rounded-lg 
                       focus:outline-none focus:ring-2 focus:ring-blue-400`}
            placeholder="https://example.com/your-image.jpg"
            aria-invalid={errors.image ? "true" : "false"}
            aria-describedby={errors.image ? "error-image" : null}
          />
          {errors.image && <p id="error-image" className="text-red-500 text-sm mt-1">{errors.image}</p>}
        </div>

        {/* Ingredients Field */}
        <div>
          <label htmlFor="ingredients" className="block text-gray-700 text-lg font-medium mb-2">
            Ingredients (one per line):
          </label>
          <textarea
            id="ingredients"
            value={ingredients}
            onChange={(e) => setIngredients(e.target.value)}
            rows="6"
            className={`w-full p-3 border ${errors.ingredients ? 'border-red-500' : 'border-gray-300'} rounded-lg 
                       focus:outline-none focus:ring-2 focus:ring-blue-400 resize-y`}
            placeholder="e.g.,&#10;2 cups all-purpose flour&#10;1 cup granulated sugar&#10;3 large eggs&#10;1 tsp vanilla extract"
            aria-invalid={errors.ingredients ? "true" : "false"}
            aria-describedby={errors.ingredients ? "error-ingredients" : null}
          ></textarea>
          {errors.ingredients && <p id="error-ingredients" className="text-red-500 text-sm mt-1">{errors.ingredients}</p>}
        </div>

        {/* Instructions Field */}
        <div>
          <label htmlFor="instructions" className="block text-gray-700 text-lg font-medium mb-2">
            Preparation Steps (one per line):
          </label>
          <textarea
            id="instructions"
            value={instructions}
            onChange={(e) => setInstructions(e.target.value)}
            rows="8"
            className={`w-full p-3 border ${errors.instructions ? 'border-red-500' : 'border-gray-300'} rounded-lg 
                       focus:outline-none focus:ring-2 focus:ring-blue-400 resize-y`}
            placeholder="e.g.,&#10;1. Preheat oven to 350°F (175°C).&#10;2. In a large bowl, whisk together dry ingredients.&#10;3. In a separate bowl, mix wet ingredients.&#10;4. Combine wet and dry ingredients.&#10;5. Pour into a baking dish and bake for 30-35 minutes."
            aria-invalid={errors.instructions ? "true" : "false"}
            aria-describedby={errors.instructions ? "error-instructions" : null}
          ></textarea>
          {errors.instructions && <p id="error-instructions" className="text-red-500 text-sm mt-1">{errors.instructions}</p>}
        </div>

        {/* Submission Message */}
        {submissionMessage && (
          <p className={`text-center font-bold ${Object.keys(errors).length === 0 ? 'text-green-600' : 'text-red-600'} mt-4`}>
            {submissionMessage}
          </p>
        )}

        {/* Submit Button */}
        <button
          type="submit"
          className="w-full bg-blue-600 text-white font-bold py-3 px-6 rounded-lg 
                     hover:bg-blue-700 focus:outline-none focus:ring-4 focus:ring-blue-300 
                     transition duration-300 ease-in-out transform hover:scale-105"
        >
          Add Recipe
        </button>
      </form>
    </div>
  );
};

export default AddRecipeForm;
